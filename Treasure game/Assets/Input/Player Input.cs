//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.1.1
//     from Assets/Input/Player Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player Input"",
    ""maps"": [
        {
            ""name"": ""GirlControls"",
            ""id"": ""7e76e37a-0a83-4c28-9f6d-cec4d923d12d"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""660a20e1-44fb-498b-8ab4-62c717a60212"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""f04dba06-9a63-49d8-bba2-745e86d76cc4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""2848d300-707c-4550-b27d-193a11d40a15"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""edf178bf-2d16-4510-9855-0d0b61e6a169"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""138de860-7468-41f5-8825-1a61080854fd"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c178cb61-f28b-400b-9137-ac9c6334a817"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0bfe6d77-1911-4033-bb86-0201d1c8655e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""16c7c4f0-0152-447d-95e5-4d6c466ebdda"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""062f5580-6a0d-4c23-b794-93703bf3ec50"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e10c6ff8-147a-465b-8cad-2b65457cac33"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GirlControls
        m_GirlControls = asset.FindActionMap("GirlControls", throwIfNotFound: true);
        m_GirlControls_Move = m_GirlControls.FindAction("Move", throwIfNotFound: true);
        m_GirlControls_Run = m_GirlControls.FindAction("Run", throwIfNotFound: true);
        m_GirlControls_Jump = m_GirlControls.FindAction("Jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GirlControls
    private readonly InputActionMap m_GirlControls;
    private IGirlControlsActions m_GirlControlsActionsCallbackInterface;
    private readonly InputAction m_GirlControls_Move;
    private readonly InputAction m_GirlControls_Run;
    private readonly InputAction m_GirlControls_Jump;
    public struct GirlControlsActions
    {
        private @PlayerInput m_Wrapper;
        public GirlControlsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_GirlControls_Move;
        public InputAction @Run => m_Wrapper.m_GirlControls_Run;
        public InputAction @Jump => m_Wrapper.m_GirlControls_Jump;
        public InputActionMap Get() { return m_Wrapper.m_GirlControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GirlControlsActions set) { return set.Get(); }
        public void SetCallbacks(IGirlControlsActions instance)
        {
            if (m_Wrapper.m_GirlControlsActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_GirlControlsActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_GirlControlsActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_GirlControlsActionsCallbackInterface.OnMove;
                @Run.started -= m_Wrapper.m_GirlControlsActionsCallbackInterface.OnRun;
                @Run.performed -= m_Wrapper.m_GirlControlsActionsCallbackInterface.OnRun;
                @Run.canceled -= m_Wrapper.m_GirlControlsActionsCallbackInterface.OnRun;
                @Jump.started -= m_Wrapper.m_GirlControlsActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_GirlControlsActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_GirlControlsActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_GirlControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Run.started += instance.OnRun;
                @Run.performed += instance.OnRun;
                @Run.canceled += instance.OnRun;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public GirlControlsActions @GirlControls => new GirlControlsActions(this);
    public interface IGirlControlsActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
}
